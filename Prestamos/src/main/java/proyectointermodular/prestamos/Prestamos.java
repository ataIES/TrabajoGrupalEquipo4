/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectointermodular.prestamos;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 * Clase Prestamos que contiene el JFrame realizado en Swing.
 *
 * @author Víctor Sánchez Llada, César Torre, Efrén Gutiérrez y Adrián Tresgallo.
 */
public class Prestamos extends javax.swing.JFrame {

    /**
     * Atributo de tipo AccesoBaseDatos que será la instancia de conexión a la BD.
     */
    private AccesoBaseDatos bd = AccesoBaseDatos.getInstance();

    /**
     * Creates new form PrestamosI
     */
    public Prestamos() {
        initComponents();
        //this.setLocationRelativeTo(null);
        //jPPortada.setVisible(true);
        mostrarImagen();
    }

    /**
     * Método privado mostrarImagen que realiza las operaciones necesarias para mostrar imágenes e iconos.
     */
    private void mostrarImagen() {

        //Imagen portada
        ImageIcon img = new ImageIcon(getClass().getClassLoader().getResource("Imagen/logo.jpg"));
        Icon icon = new ImageIcon(img.getImage().getScaledInstance(lblLogo.getWidth(), lblLogo.getHeight(), img.getIconWidth()));
        lblLogo.setIcon(icon);

        //Icono formulario
        Image icon2 = new ImageIcon(getClass().getClassLoader().getResource("Imagen/ico.png")).getImage();
        setIconImage(icon2);

        //Fondo JPanels
        ImageIcon fondo = new ImageIcon(getClass().getClassLoader().getResource("Imagen/fondo.jpg"));
        fondoJPanels(fondo, lblFondoSolicitar);
        fondoJPanels(fondo, lblFondoCalculo);
        fondoJPanels(fondo, lblFondoMostrar);
        fondoJPanels(fondo, lblFondoFirmar);

    }

    /**
     * Método privado fondoJPanels que inserta una imagen en una label.
     *
     * @param imageIcon Parámetro de tipo ImageIcon que será la imagen a insertar.
     * @param label Parámetro de tipo JLabel que será el componente.
     */
    private void fondoJPanels(ImageIcon imageIcon, JLabel label) {
        Icon fondoSolicitar = new ImageIcon(imageIcon.getImage().getScaledInstance(label.getWidth(), label.getHeight(), imageIcon.getIconWidth()));
        label.setIcon(fondoSolicitar);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPPortada = new javax.swing.JPanel();
        jBSolicitar = new javax.swing.JButton();
        jBCalcular = new javax.swing.JButton();
        jBMostrar = new javax.swing.JButton();
        jBBFirmar = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        jPSolicitar = new javax.swing.JPanel();
        jScrollPaneClientesSolicitar = new javax.swing.JScrollPane();
        jTableSolicitar = new javax.swing.JTable();
        jButtonVolverSolicitar = new javax.swing.JButton();
        jLabelDNISolicitar = new javax.swing.JLabel();
        jTextFieldDNISolicitar = new javax.swing.JTextField();
        jButtonBuscarSolicitar = new javax.swing.JButton();
        jButtonLimpiarSolicitar = new javax.swing.JButton();
        jLabelTituloSolicitar = new javax.swing.JLabel();
        jLabelDatosClienteSolicitar = new javax.swing.JLabel();
        jButtonProcesarSolicitar = new javax.swing.JButton();
        jComboBoxPeriodoMesesSolicitar = new javax.swing.JComboBox<>();
        jLabelPeriodoMesesSolicitar = new javax.swing.JLabel();
        jLabelTipoInteresSolicitar = new javax.swing.JLabel();
        jComboBoxTipoInteresSolicitar = new javax.swing.JComboBox<>();
        jLabelPlazoAceptacionSolicitar = new javax.swing.JLabel();
        jComboBoxPlazoAceptacionSolicitar = new javax.swing.JComboBox<>();
        lblFondoSolicitar = new javax.swing.JLabel();
        jPCalcularPrestamo = new javax.swing.JPanel();
        jScrollPanePrestamo = new javax.swing.JScrollPane();
        jTableCalculo = new javax.swing.JTable();
        jLCalculoPrestamo = new javax.swing.JLabel();
        jBCalculo = new javax.swing.JButton();
        jBVolver = new javax.swing.JButton();
        jGrabar = new javax.swing.JButton();
        lblFondoCalculo = new javax.swing.JLabel();
        jPMostrar = new javax.swing.JPanel();
        jBVolverMostrar = new javax.swing.JButton();
        jLabelMostrar = new javax.swing.JLabel();
        jLabelFiltroMostrar = new javax.swing.JLabel();
        jComboBoxFiltroMostrar = new javax.swing.JComboBox<>();
        jTextFieldDatoMostrar = new javax.swing.JTextField();
        jButtonBuscarMostrar = new javax.swing.JButton();
        jButtonLimpiarMostrar = new javax.swing.JButton();
        jScrollPane1Mostrar = new javax.swing.JScrollPane();
        jTableMostrar = new javax.swing.JTable();
        lblFondoMostrar = new javax.swing.JLabel();
        jPFirmar = new javax.swing.JPanel();
        jLPrestamoConcedido = new javax.swing.JLabel();
        DNI = new javax.swing.JLabel();
        jTIntroDNI = new javax.swing.JTextField();
        jBPLimpiar = new javax.swing.JButton();
        jBFirmar = new javax.swing.JButton();
        jScrollPaneConcedidos = new javax.swing.JScrollPane();
        jTableConcedidosFirmar = new javax.swing.JTable();
        jBPreconcedidos2 = new javax.swing.JButton();
        jLFirmarPrestamo1 = new javax.swing.JLabel();
        jScrollPanePreconcedido = new javax.swing.JScrollPane();
        jTablePreconcedidosFirmar = new javax.swing.JTable();
        jLPrestamoPreconcedido1 = new javax.swing.JLabel();
        jBVolver1 = new javax.swing.JButton();
        jButtonGenerarInformePrestamosConcedidosActionPerformed = new javax.swing.JButton();
        lblFondoFirmar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Préstamos - Aurora Bank");
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPPortada.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jBSolicitar.setText("Solicitar");
        jBSolicitar.setToolTipText("Solicitud de préstamo preconcedido.");
        jBSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSolicitarActionPerformed(evt);
            }
        });
        jPPortada.add(jBSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 520, -1, -1));

        jBCalcular.setText("Calcular");
        jBCalcular.setToolTipText("Cálculo masivo de préstamos preconcedidos.");
        jBCalcular.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCalcularActionPerformed(evt);
            }
        });
        jPPortada.add(jBCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 520, -1, -1));

        jBMostrar.setText("Mostrar");
        jBMostrar.setToolTipText("Mostrar datos de clientes y préstamos.");
        jBMostrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMostrarActionPerformed(evt);
            }
        });
        jPPortada.add(jBMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 520, -1, -1));

        jBBFirmar.setText("Firmar");
        jBBFirmar.setToolTipText("Firma de préstamos preconcedidos.");
        jBBFirmar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBBFirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBFirmarActionPerformed(evt);
            }
        });
        jPPortada.add(jBBFirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 520, -1, -1));
        jPPortada.add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 804, 580));
        lblLogo.getAccessibleContext().setAccessibleName("Logo");

        getContentPane().add(jPPortada, "card2");

        jPSolicitar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPaneClientesSolicitar.setViewportView(jTableSolicitar);

        jPSolicitar.add(jScrollPaneClientesSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 730, 190));

        jButtonVolverSolicitar.setText("Volver");
        jButtonVolverSolicitar.setToolTipText("Volver al menú principal.");
        jButtonVolverSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonVolverSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverSolicitarActionPerformed(evt);
            }
        });
        jPSolicitar.add(jButtonVolverSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 520, -1, -1));

        jLabelDNISolicitar.setText("DNI:");
        jPSolicitar.add(jLabelDNISolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jTextFieldDNISolicitar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDNISolicitarKeyPressed(evt);
            }
        });
        jPSolicitar.add(jTextFieldDNISolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 170, -1));

        jButtonBuscarSolicitar.setText("Buscar");
        jButtonBuscarSolicitar.setToolTipText("Buscar cliente.");
        jButtonBuscarSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBuscarSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarSolicitarActionPerformed(evt);
            }
        });
        jPSolicitar.add(jButtonBuscarSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, -1, -1));

        jButtonLimpiarSolicitar.setText("Limpiar");
        jButtonLimpiarSolicitar.setToolTipText("Limpiar datos.");
        jButtonLimpiarSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonLimpiarSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarSolicitarActionPerformed(evt);
            }
        });
        jPSolicitar.add(jButtonLimpiarSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, -1, -1));

        jLabelTituloSolicitar.setText("Solicitar préstamo");
        jPSolicitar.add(jLabelTituloSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jLabelDatosClienteSolicitar.setText("Datos cliente:");
        jPSolicitar.add(jLabelDatosClienteSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jButtonProcesarSolicitar.setText("Solicitud de préstamo");
        jButtonProcesarSolicitar.setToolTipText("Solicitar préstamo para el cliente seleccionado.");
        jButtonProcesarSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonProcesarSolicitar.setEnabled(false);
        jButtonProcesarSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcesarSolicitarActionPerformed(evt);
            }
        });
        jPSolicitar.add(jButtonProcesarSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 430, -1, -1));

        jComboBoxPeriodoMesesSolicitar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "6", "12", "24", "48" }));
        jComboBoxPeriodoMesesSolicitar.setToolTipText("Periodo en meses en los que se devolverá el préstamo.");
        jComboBoxPeriodoMesesSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPSolicitar.add(jComboBoxPeriodoMesesSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 430, 50, -1));

        jLabelPeriodoMesesSolicitar.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPeriodoMesesSolicitar.setText("Periodo meses:");
        jPSolicitar.add(jLabelPeriodoMesesSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, -1, -1));

        jLabelTipoInteresSolicitar.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTipoInteresSolicitar.setText("Tipo interés (%):");
        jLabelTipoInteresSolicitar.setToolTipText("");
        jPSolicitar.add(jLabelTipoInteresSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 430, -1, -1));

        jComboBoxTipoInteresSolicitar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "1.5", "2", "2.5", "3", "3.5" }));
        jComboBoxTipoInteresSolicitar.setToolTipText("Tipo de interés del préstamo en %.");
        jComboBoxTipoInteresSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPSolicitar.add(jComboBoxTipoInteresSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 50, -1));

        jLabelPlazoAceptacionSolicitar.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPlazoAceptacionSolicitar.setText("Plazo aceptación (días):");
        jPSolicitar.add(jLabelPlazoAceptacionSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 430, -1, -1));

        jComboBoxPlazoAceptacionSolicitar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "15", "20", "25", "30" }));
        jComboBoxPlazoAceptacionSolicitar.setToolTipText("Plazo de aceptación del préstamo en días.");
        jComboBoxPlazoAceptacionSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPSolicitar.add(jComboBoxPlazoAceptacionSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 430, 50, -1));
        jPSolicitar.add(lblFondoSolicitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 804, 580));

        getContentPane().add(jPSolicitar, "card3");

        jPCalcularPrestamo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPanePrestamo.setForeground(new java.awt.Color(255, 255, 255));

        jScrollPanePrestamo.setViewportView(jTableCalculo);

        jPCalcularPrestamo.add(jScrollPanePrestamo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 730, 410));

        jLCalculoPrestamo.setText("Cálculo de préstamos preconcedidos");
        jPCalcularPrestamo.add(jLCalculoPrestamo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 210, 30));

        jBCalculo.setText("Calcular");
        jBCalculo.setToolTipText("Ejecutar el cálculo masivo de préstamos.");
        jBCalculo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBCalculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCalculoActionPerformed(evt);
            }
        });
        jPCalcularPrestamo.add(jBCalculo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, -1, -1));

        jBVolver.setText("Volver");
        jBVolver.setToolTipText("Volver al menú principal.");
        jBVolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVolverActionPerformed(evt);
            }
        });
        jPCalcularPrestamo.add(jBVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 520, -1, -1));

        jGrabar.setText("Generar informe");
        jGrabar.setToolTipText("Guardar en un fichero de texto el informe de préstamos cálculados.");
        jGrabar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGrabarActionPerformed(evt);
            }
        });
        jPCalcularPrestamo.add(jGrabar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 520, -1, -1));
        jPCalcularPrestamo.add(lblFondoCalculo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 804, 580));

        getContentPane().add(jPCalcularPrestamo, "card5");

        jPMostrar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jBVolverMostrar.setText("Volver");
        jBVolverMostrar.setToolTipText("Volver al menú principal.");
        jBVolverMostrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBVolverMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVolverMostrarActionPerformed(evt);
            }
        });
        jPMostrar.add(jBVolverMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 520, -1, -1));

        jLabelMostrar.setText("Mostrar datos de clientes y préstamos");
        jPMostrar.add(jLabelMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jLabelFiltroMostrar.setText("Filtro:");
        jPMostrar.add(jLabelFiltroMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jComboBoxFiltroMostrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "DNI", "Localidad" }));
        jComboBoxFiltroMostrar.setToolTipText("Filtro de búsqueda.");
        jComboBoxFiltroMostrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPMostrar.add(jComboBoxFiltroMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        jTextFieldDatoMostrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDatoMostrarKeyPressed(evt);
            }
        });
        jPMostrar.add(jTextFieldDatoMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 180, -1));

        jButtonBuscarMostrar.setText("Buscar");
        jButtonBuscarMostrar.setToolTipText("Buscar cliente/s.");
        jButtonBuscarMostrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBuscarMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarMostrarActionPerformed(evt);
            }
        });
        jPMostrar.add(jButtonBuscarMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, -1, -1));

        jButtonLimpiarMostrar.setText("Limpiar");
        jButtonLimpiarMostrar.setToolTipText("Limpiar datos.");
        jButtonLimpiarMostrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonLimpiarMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarMostrarActionPerformed(evt);
            }
        });
        jPMostrar.add(jButtonLimpiarMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, -1, -1));

        jTableMostrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1Mostrar.setViewportView(jTableMostrar);

        jPMostrar.add(jScrollPane1Mostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 730, 370));
        jPMostrar.add(lblFondoMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 804, 580));

        getContentPane().add(jPMostrar, "card4");

        jPFirmar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLPrestamoConcedido.setText("Préstamos concedidos");
        jPFirmar.add(jLPrestamoConcedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        DNI.setText("DNI:");
        jPFirmar.add(DNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        jTIntroDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTIntroDNIKeyPressed(evt);
            }
        });
        jPFirmar.add(jTIntroDNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 150, -1));

        jBPLimpiar.setText("Limpiar");
        jBPLimpiar.setToolTipText("Limpiar datos.");
        jBPLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBPLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPLimpiarActionPerformed(evt);
            }
        });
        jPFirmar.add(jBPLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, -1, -1));

        jBFirmar.setText("Firmar");
        jBFirmar.setToolTipText("Firmar préstamo preconcedido seleccionado.");
        jBFirmar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBFirmar.setEnabled(false);
        jBFirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFirmarActionPerformed(evt);
            }
        });
        jPFirmar.add(jBFirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 300, -1, -1));

        jTableConcedidosFirmar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneConcedidos.setViewportView(jTableConcedidosFirmar);

        jPFirmar.add(jScrollPaneConcedidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 730, 200));

        jBPreconcedidos2.setText("Buscar");
        jBPreconcedidos2.setToolTipText("Buscar cliente.");
        jBPreconcedidos2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBPreconcedidos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPreconcedidos2ActionPerformed(evt);
            }
        });
        jPFirmar.add(jBPreconcedidos2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, -1, -1));

        jLFirmarPrestamo1.setText("Firmar préstamo preconcedido");
        jPFirmar.add(jLFirmarPrestamo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        jTablePreconcedidosFirmar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPanePreconcedido.setViewportView(jTablePreconcedidosFirmar);

        jPFirmar.add(jScrollPanePreconcedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 730, 150));

        jLPrestamoPreconcedido1.setText("Préstamos preconcedidos");
        jPFirmar.add(jLPrestamoPreconcedido1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jBVolver1.setText("Volver");
        jBVolver1.setToolTipText("Volver al menú principal.");
        jBVolver1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBVolver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVolver1ActionPerformed(evt);
            }
        });
        jPFirmar.add(jBVolver1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 540, -1, -1));

        jButtonGenerarInformePrestamosConcedidosActionPerformed.setText("Generar informe");
        jButtonGenerarInformePrestamosConcedidosActionPerformed.setToolTipText("Generar informe de préstamos concedidos.");
        jButtonGenerarInformePrestamosConcedidosActionPerformed.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonGenerarInformePrestamosConcedidosActionPerformed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarInformePrestamosConcedidosActionPerformedActionPerformed(evt);
            }
        });
        jPFirmar.add(jButtonGenerarInformePrestamosConcedidosActionPerformed, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, -1, -1));
        jPFirmar.add(lblFondoFirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 804, 580));

        getContentPane().add(jPFirmar, "card6");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método jBSolicitarActionPerformed que permite acceder a la pantalla de solicitud de préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSolicitarActionPerformed
        // TODO add your handling code here:
        jPPortada.setVisible(false);
        jPSolicitar.setVisible(true);
    }//GEN-LAST:event_jBSolicitarActionPerformed

    /**
     * Método jButtonVolverSolicitarActionPerformed que permite volver al menú principal desde la pantalla de solicitud de préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jButtonVolverSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverSolicitarActionPerformed
        // TODO add your handling code here:
        jPSolicitar.setVisible(false);
        jPPortada.setVisible(true);
        jButtonLimpiarSolicitarActionPerformed(evt);

    }//GEN-LAST:event_jButtonVolverSolicitarActionPerformed

    /**
     * Método jButtonLimpiarSolicitarActionPerformed que permite limpiar datos en la pantalla de solicitud de préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jButtonLimpiarSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarSolicitarActionPerformed
        // TODO add your handling code here:
        jTextFieldDNISolicitar.setText("");
        jTableSolicitar.setModel(new DefaultTableModel());
        jButtonProcesarSolicitar.setEnabled(false);
        jTextFieldDNISolicitar.setEnabled(true);
    }//GEN-LAST:event_jButtonLimpiarSolicitarActionPerformed

    /**
     * Método jBVolverMostrarActionPerformed que permite volver al menú principal desde la pantalla de mostrar clientes y préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBVolverMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVolverMostrarActionPerformed
        // TODO add your handling code here:
        jPMostrar.setVisible(false);
        jPPortada.setVisible(true);
        jButtonLimpiarMostrarActionPerformed(evt);
    }//GEN-LAST:event_jBVolverMostrarActionPerformed

    /**
     * Método jBMostrarActionPerformed que permite acceder a la pantalla de mostrar clientes y préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMostrarActionPerformed
        // TODO add your handling code here:
        jPPortada.setVisible(false);
        jPMostrar.setVisible(true);
    }//GEN-LAST:event_jBMostrarActionPerformed

    /**
     * Método jButtonLimpiarMostrarActionPerformed que permite limpiar datos de la pantalla mostrar clientes y préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jButtonLimpiarMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarMostrarActionPerformed
        // TODO add your handling code here:
        jTextFieldDatoMostrar.setText("");
        jTableMostrar.setModel(new DefaultTableModel());
        jButtonProcesarSolicitar.setEnabled(false);
        jTextFieldDatoMostrar.setEnabled(true);
        jComboBoxFiltroMostrar.setSelectedIndex(0);
    }//GEN-LAST:event_jButtonLimpiarMostrarActionPerformed

    /**
     * Método jButtonBuscarSolicitarActionPerformed que permite buscar el cliente por DNI y mostrar su información en la pantalla de solicitar préstamo.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jButtonBuscarSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarSolicitarActionPerformed
        // TODO add your handling code here:

        /*
        23456789G apto
        76543210S apto
        98765432M apto
        87654321V con morosidad
        54321098G no requisitos mínimos
        87654321P pareja cliente pero sin regimen ganancial
        65432109V pareja cliente pero tiene morosidad/asuntos judiciales
         */
        String dni = jTextFieldDNISolicitar.getText();

        if (!dni.equalsIgnoreCase("")) {

            if (Funciones.esCadenaValida(dni, "[0-9]{7,8}[A-Z a-z]")) {

                jTextFieldDNISolicitar.setEnabled(false);
                Cliente cliente = MetodosBD.clientePorDni(dni);

                if (cliente != null) {

                    jButtonProcesarSolicitar.setEnabled(true);
                    String[] columnasTablaSolicitar = {"DNI", "Nombre", "Apellidos", "IBAN", "Tipo cuenta"};
                    String[] datosCliente = {cliente.getDni(), cliente.getNombre(), cliente.getApellidos(), cliente.getCuentaBancaria().getIBAN(), cliente.getCuentaBancaria().getTipoCuenta().name()};
                    DefaultTableModel modeloTabla = new DefaultTableModel(null, columnasTablaSolicitar) {
                        // Sobrescribir el método isCellEditable para que devuelva siempre false
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false; // No permitir la edición de ninguna celda
                        }
                    };
                    jTableSolicitar.setModel(modeloTabla);
                    jTableSolicitar.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    modeloTabla.addRow(datosCliente);

                } else {
                    JOptionPane.showMessageDialog(null, "No existe como cliente del banco.", "Solicitar préstamo", JOptionPane.WARNING_MESSAGE, null);
                    jButtonLimpiarSolicitarActionPerformed(evt);
                }

            } else {
                JOptionPane.showMessageDialog(null, "El DNI no tiene el formato correcto.", "Solicitar préstamo", JOptionPane.WARNING_MESSAGE, null);
                jButtonLimpiarSolicitarActionPerformed(evt);
            }

        } else {
            JOptionPane.showMessageDialog(null, "El DNI no puede estar vacío.", "Solicitar préstamo", JOptionPane.WARNING_MESSAGE, null);
        }


    }//GEN-LAST:event_jButtonBuscarSolicitarActionPerformed

    /**
     * Método jBCalculoActionPerformed que permite realizar el cálculo de préstamos preconcedidos para todos los clientes y mostrar su información.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBCalculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCalculoActionPerformed
        // TODO add your handling code here:

        //Procesar clientes
        List<Cliente> clientes = MetodosBD.listarClientes();

        if (!clientes.isEmpty()) {

            for (Cliente clienteApto : clientes) {

                if (Funciones.aptoParaPrestamo(clienteApto) != null) {
                    System.out.println(clienteApto.getDni() + " Apto para préstamo" + " | Cantidad: " + Funciones.cantidadPrestamo(clienteApto));
                    MetodosBD.insertarPrestamopreconcedido(new PrestamoPreconcedido((int) (Math.random() * (24 - 3)) + 3, Math.random() * 3, (int) (Math.random() * (30 - 10)) + 10, clienteApto, LocalDate.now(), Funciones.cantidadPrestamo(clienteApto), false));
                } else {
                    System.out.println("No apto para préstamo.");
                }
            }

            //Mostrar préstamos preconcedidos generados
            List<PrestamoPreconcedido> lista = MetodosBD.listarPrestamosPreconcedidos();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

            if (!lista.isEmpty()) {

                String[] columnasTablaSolicitar = {"NºPrestamo", "DNI Cliente", "Fecha_Oferta", "Cantidad €", "Periodo en Meses", "Interés %", "Plazo de Aceptación"};
                DefaultTableModel modeloTabla = new DefaultTableModel(null, columnasTablaSolicitar) {
                    // Sobrescribir el método isCellEditable para que devuelva siempre false
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; // No permitir la edición de ninguna celda
                    }
                };
                jTableCalculo.setModel(modeloTabla);
                jTableCalculo.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (PrestamoPreconcedido preconcedido : lista) {
                    String[] datosPreconcedidos = {String.valueOf(preconcedido.getId()), preconcedido.getCliente().getDni(), preconcedido.getFecha().format(formatter),
                        String.valueOf(preconcedido.getCantidad()), String.valueOf(preconcedido.getPeriodoMeses()), String.valueOf(preconcedido.getTipoInteres()),
                        String.valueOf(preconcedido.getPlazoAceptacion())};
                    modeloTabla.addRow(datosPreconcedidos);
                }

            } else {
                JOptionPane.showMessageDialog(null, "No hay ningún préstamo preconcedido", "Cálculo de los Préstamos preconcedidos", JOptionPane.ERROR_MESSAGE);
            }

            //JOptionPane.showMessageDialog(null, "Cálculo masivo generado.", "Cálculo de los Préstamos preconcedidos", JOptionPane.INFORMATION_MESSAGE, null);
        } else {
            JOptionPane.showMessageDialog(null, "La lista de clientes está vacía. No se ha generado ningún cálculo.", "Cálculo de los Préstamos preconcedidos", JOptionPane.ERROR_MESSAGE, null);
            System.out.println("Está vacía.");
        }

    }//GEN-LAST:event_jBCalculoActionPerformed

    /**
     * Método jBVolverActionPerformed que permite volver al menú principal desde la pantalla de clacular préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVolverActionPerformed
        // TODO add your handling code here:
        jPPortada.setVisible(true);
        jPSolicitar.setVisible(false);
        jPCalcularPrestamo.setVisible(false);
        jPMostrar.setVisible(false);
        jTableCalculo.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jBVolverActionPerformed

    /**
     * Método jBCalcularActionPerformed que permite acceder a la pantalla del cálculo de préstamos preconcedidos para todos los clientes.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCalcularActionPerformed
        // TODO add your handling code here:
        jPPortada.setVisible(false);
        jPSolicitar.setVisible(false);
        jPCalcularPrestamo.setVisible(true);
        jPMostrar.setVisible(false);
    }//GEN-LAST:event_jBCalcularActionPerformed

    /**
     * Método jBPLimpiarActionPerformed que permite limpiar datos de la pantalla firmar préstamos preconcedidos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBPLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPLimpiarActionPerformed
        // TODO add your handling code here:
        jTIntroDNI.setText("");
        jTablePreconcedidosFirmar.setModel(new DefaultTableModel());
        jTableConcedidosFirmar.setModel(new DefaultTableModel());
        jTIntroDNI.setEnabled(true);
        jBFirmar.setEnabled(false);
    }//GEN-LAST:event_jBPLimpiarActionPerformed

    /**
     * Método jBFirmarActionPerformed que permite firmar un préstamo preconcedido seleccionado.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBFirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFirmarActionPerformed
        // TODO add your handling code here:

        //jTextFieldDNISolicitar.setText("98765432M");
        int fila = jTablePreconcedidosFirmar.getSelectedRow();

        if (fila != -1) {

            LocalDate fecha = LocalDate.now();
            String dni = jTIntroDNI.getText();
            int num = Integer.parseInt(jTablePreconcedidosFirmar.getValueAt(fila, 0).toString());

            Cliente cliente = MetodosBD.clientePorDni(dni);

            if (cliente != null) {

                PrestamoPreconcedido prestamo = MetodosBD.prestamoPreconcedidoPorIdClienteNum(cliente.getUuid(), num);

                if (prestamo != null) {

                    if (!prestamo.isFirmado()) {

                        if (Funciones.esFechaAnterior(fecha, prestamo.getFecha().plusDays(prestamo.getPlazoAceptacion()))) {

                            double cantidadSinTasas = prestamo.getCantidad() / prestamo.getPeriodoMeses();
                            double tasas = (cantidadSinTasas * prestamo.getTipoInteres()) / 100;
                            double cantidadFinal = cantidadSinTasas + tasas;

                            PrestamoConcedido prestamoC = new PrestamoConcedido(prestamo, null, cliente, fecha, cantidadFinal);

                            MetodosBD.insertarPrestamoConcedido(prestamoC);

                            JOptionPane.showMessageDialog(null, "Préstamo preconcedido firmado.", "Firma de préstamo", JOptionPane.INFORMATION_MESSAGE, null);
                            jBPreconcedidos2ActionPerformed(evt);

                        } else {
                            JOptionPane.showMessageDialog(null, "La fecha de la oferta ya no es válida.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "El préstamo preconcedido seleccionado ya está firmado.", "Firma de préstamo", JOptionPane.INFORMATION_MESSAGE, null);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No se encuentra el préstamo seleccionado.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
                }

            } else {
                JOptionPane.showMessageDialog(null, "No se encuentra el cliente con el DNI introducido.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un préstamo para poder firmarle.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
        }

    }//GEN-LAST:event_jBFirmarActionPerformed

    /**
     * Método jBPreconcedidos2ActionPerformed que permite buscar un cliente por su DNI y mostrar sus préstamos preconcedidos y concedidos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBPreconcedidos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPreconcedidos2ActionPerformed

        String dni = jTIntroDNI.getText();

        if (!dni.equalsIgnoreCase("")) {

            if (Funciones.esCadenaValida(dni, "[0-9]{7,8}[A-Z a-z]")) {

                Cliente aux = MetodosBD.clientePorDni(dni);

                if (aux != null) {

                    jTIntroDNI.setEnabled(false);
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    String[] columnasTablaPrestamosPre = {"Nº Préstamo", "Fecha oferta", "Cantidad €", "Periodo en Meses", "Interés %", "Plazo de Aceptación", "Firmado"};
                    DefaultTableModel modeloTablaPrestamosPre = new DefaultTableModel(null, columnasTablaPrestamosPre) {
                        // Sobrescribir el método isCellEditable para que devuelva siempre false
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false; // No permitir la edición de ninguna celda
                        }
                    };
                    jTablePreconcedidosFirmar.setModel(modeloTablaPrestamosPre);
                    jTablePreconcedidosFirmar.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    List<PrestamoPreconcedido> prestamos = MetodosBD.listarPrestamosPreconcedidosPorDNI(dni);

                    if (!prestamos.isEmpty()) {

                        jBFirmar.setEnabled(true);

                        for (PrestamoPreconcedido prestamo : prestamos) {
                            String[] datosPrestamo = {String.valueOf(prestamo.getId()), prestamo.getFecha().format(formatter), String.valueOf(prestamo.getCantidad()), String.valueOf(prestamo.getPeriodoMeses()), String.valueOf(prestamo.getTipoInteres()), String.valueOf(prestamo.getPlazoAceptacion()), prestamo.isFirmado() ? "Sí" : "No"};
                            modeloTablaPrestamosPre.addRow(datosPrestamo);
                        }

                    } else {
                        jTablePreconcedidosFirmar.setModel(new DefaultTableModel());
                        JOptionPane.showMessageDialog(null, "No se encuentran préstamos preconcedidos para el DNI introducido.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
                    }

                    String[] columnasTablaPrestamosCon = {"Nº Préstamo", "Fecha firma", "Cantidad mensual €", "Nº P. Preconcedido"};
                    DefaultTableModel modeloTablaPrestamosCon = new DefaultTableModel(null, columnasTablaPrestamosCon) {
                        // Sobrescribir el método isCellEditable para que devuelva siempre false
                        @Override
                        public boolean isCellEditable(int row, int column) {
                            return false; // No permitir la edición de ninguna celda
                        }
                    };
                    jTableConcedidosFirmar.setModel(modeloTablaPrestamosCon);
                    jTableConcedidosFirmar.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    List<PrestamoConcedido> prestamosConcedidos = MetodosBD.listarPrestamosConcedidosPorId(aux.getUuid());

                    if (!prestamosConcedidos.isEmpty()) {

                        for (PrestamoConcedido prestamoConcedido : prestamosConcedidos) {
                            String[] datosPrestamo = {String.valueOf(prestamoConcedido.getId()), prestamoConcedido.getFecha().format(formatter), String.valueOf(prestamoConcedido.getCantidad()), String.valueOf(prestamoConcedido.getPrestamoPreconcedido().getId())};
                            modeloTablaPrestamosCon.addRow(datosPrestamo);
                        }

                    } else {
                        jTableConcedidosFirmar.setModel(new DefaultTableModel());
                        JOptionPane.showMessageDialog(null, "No se encuentra préstamos concedidos para el DNI introducido.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
                    }

                } else {
                    jTableConcedidosFirmar.setModel(new DefaultTableModel());
                    JOptionPane.showMessageDialog(null, "No se encuentra el cliente para el DNI introducido.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
                    jBPLimpiarActionPerformed(evt);
                }

            } else {
                JOptionPane.showMessageDialog(null, "El DNI no tiene el formato correcto.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
                jBPLimpiarActionPerformed(evt);
            }

        } else {
            jBPLimpiarActionPerformed(evt);
            JOptionPane.showMessageDialog(null, "El DNI no puede estar vacío.", "Firma de préstamo", JOptionPane.WARNING_MESSAGE, null);
        }

    }//GEN-LAST:event_jBPreconcedidos2ActionPerformed

    /**
     * Método jBVolver1ActionPerformed que permite volver al menú principal desde la pantalla de firmar préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBVolver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVolver1ActionPerformed
        // TODO add your handling code here:
        jBPLimpiarActionPerformed(evt);
        jPPortada.setVisible(true);
        jPSolicitar.setVisible(false);
        jPCalcularPrestamo.setVisible(false);
        jPMostrar.setVisible(false);
        jPFirmar.setVisible(false);
    }//GEN-LAST:event_jBVolver1ActionPerformed

    /**
     * Método jBBFirmarActionPerformed que permite acceder a la pantalla de firmar préstamos preconcedidos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jBBFirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBFirmarActionPerformed
        // TODO add your handling code here:
        jPPortada.setVisible(false);
        jPSolicitar.setVisible(false);
        jPCalcularPrestamo.setVisible(false);
        jPMostrar.setVisible(false);
        jPFirmar.setVisible(true);
    }//GEN-LAST:event_jBBFirmarActionPerformed

    /**
     * Método jButtonProcesarSolicitarActionPerformed que permite procesar la solicitud de un préstamo.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jButtonProcesarSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcesarSolicitarActionPerformed
        // TODO add your handling code here:

        String dni = jTextFieldDNISolicitar.getText();

        Cliente clienteApto = Funciones.aptoParaPrestamo(MetodosBD.clientePorDni(dni));

        if (clienteApto != null) {
            System.out.println(clienteApto.getDni() + " Apto para préstamo");
            System.out.println("Cantidad: " + Funciones.cantidadPrestamo(clienteApto));
            MetodosBD.insertarPrestamopreconcedido(new PrestamoPreconcedido(Integer.parseInt(jComboBoxPeriodoMesesSolicitar.getSelectedItem().toString()), Double.parseDouble(jComboBoxTipoInteresSolicitar.getSelectedItem().toString()), Integer.parseInt(jComboBoxPlazoAceptacionSolicitar.getSelectedItem().toString()), clienteApto, LocalDate.now(), Funciones.cantidadPrestamo(clienteApto), false));
            JOptionPane.showMessageDialog(null, "Apto para préstamo. Cantidad = " + Funciones.cantidadPrestamo(clienteApto), "Solicitar préstamo", JOptionPane.INFORMATION_MESSAGE, null);
        } else {
            JOptionPane.showMessageDialog(null, "El cliente no es apto para préstamo.", "Solicitar préstamo", JOptionPane.WARNING_MESSAGE, null);
        }

    }//GEN-LAST:event_jButtonProcesarSolicitarActionPerformed

    /**
     * Método jButtonBuscarMostrarActionPerformed que permite buscar un cliente por su DNI/Localidad en la pantalla de mostrar clientes y préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jButtonBuscarMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarMostrarActionPerformed
        // TODO add your handling code here:

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String opc = jComboBoxFiltroMostrar.getSelectedItem().toString();
        String[] columnasTablaSolicitar = {"DNI", "Nombre", "Apellidos", "Fecha nacimiento", "Localidad", "Cantidad €", "Firmado"};
        DefaultTableModel modeloTabla = new DefaultTableModel(null, columnasTablaSolicitar) {
            // Sobrescribir el método isCellEditable para que devuelva siempre false
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // No permitir la edición de ninguna celda
            }
        };
        jTableMostrar.setModel(modeloTabla);
        jTableMostrar.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        if (opc.equalsIgnoreCase("DNI")) {

            String dni = jTextFieldDatoMostrar.getText();

            if (!dni.equalsIgnoreCase("")) {

                if (Funciones.esCadenaValida(dni, "[0-9]{7,8}[A-Z a-z]")) {

                    List<PrestamoPreconcedido> prestamos = MetodosBD.listarPrestamosPreconcedidosPorDNI(dni);

                    if (!prestamos.isEmpty()) {

                        for (PrestamoPreconcedido prestamo : prestamos) {

                            Cliente cliente = prestamo.getCliente();
                            String[] datosPrestamo = {cliente.getDni(), cliente.getNombre(), cliente.getApellidos(), cliente.getFechaNacimiento().format(formatter), cliente.getLocalidad(), String.valueOf(prestamo.getCantidad()), prestamo.isFirmado() ? "Sí" : "No"};
                            modeloTabla.addRow(datosPrestamo);
                        }

                    } else {
                        jButtonLimpiarMostrarActionPerformed(evt);
                        JOptionPane.showMessageDialog(null, "No se encuentran clientes y préstamos con el DNI introducido.", "Mostrar datos de clientes y préstamos", JOptionPane.WARNING_MESSAGE, null);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "El DNI no tiene el formato correcto.", "Mostrar datos de clientes y préstamos", JOptionPane.WARNING_MESSAGE, null);
                    jButtonLimpiarMostrarActionPerformed(evt);
                }

            } else {
                jButtonLimpiarMostrarActionPerformed(evt);
                JOptionPane.showMessageDialog(null, "El DNI no puede estar vacío.", "Mostrar datos de clientes y préstamos", JOptionPane.WARNING_MESSAGE, null);
            }

        } else if (opc.equalsIgnoreCase("localidad")) {

            String ciudad = jTextFieldDatoMostrar.getText();

            if (!ciudad.equalsIgnoreCase("")) {

                List<PrestamoPreconcedido> prestamos = MetodosBD.listarPrestamosPreconcedidosPorLocalidad(ciudad);

                if (!prestamos.isEmpty()) {

                    for (PrestamoPreconcedido prestamo : prestamos) {

                        Cliente cliente = prestamo.getCliente();
                        String[] datosPrestamo = {cliente.getDni(), cliente.getNombre(), cliente.getApellidos(), cliente.getFechaNacimiento().format(formatter), cliente.getLocalidad(), String.valueOf(prestamo.getCantidad()), prestamo.isFirmado() ? "Sí" : "No"};
                        modeloTabla.addRow(datosPrestamo);
                    }

                } else {
                    jButtonLimpiarMostrarActionPerformed(evt);
                    JOptionPane.showMessageDialog(null, "No se encuentran clientes y préstamos con la localidad introducida.", "Mostrar datos de clientes y préstamos", JOptionPane.WARNING_MESSAGE, null);
                }

            } else {
                jButtonLimpiarMostrarActionPerformed(evt);
                JOptionPane.showMessageDialog(null, "La localidad no puede estar vacía.", "Mostrar datos de clientes y préstamos", JOptionPane.WARNING_MESSAGE, null);
            }

        } else if (opc.equalsIgnoreCase("ninguno")) {

            jTextFieldDatoMostrar.setText("");
            jTextFieldDatoMostrar.setEnabled(false);
            List<PrestamoPreconcedido> prestamos = MetodosBD.listarPrestamosPreconcedidos();

            if (!prestamos.isEmpty()) {

                for (PrestamoPreconcedido prestamo : prestamos) {
                    Cliente cliente = prestamo.getCliente();
                    String[] datosPrestamo = {cliente.getDni(), cliente.getNombre(), cliente.getApellidos(), cliente.getFechaNacimiento().format(formatter), cliente.getLocalidad(), String.valueOf(prestamo.getCantidad()), prestamo.isFirmado() ? "Sí" : "No"};
                    modeloTabla.addRow(datosPrestamo);
                }

            } else {
                jButtonLimpiarMostrarActionPerformed(evt);
                JOptionPane.showMessageDialog(null, "No se encuentran clientes y préstamos.", "Mostrar datos de clientes y préstamos", JOptionPane.WARNING_MESSAGE, null);
            }

        }

    }//GEN-LAST:event_jButtonBuscarMostrarActionPerformed

    /**
     * Método jGrabarActionPerformed que permite guardar un informe en txt de los préstamos y sus clientes.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGrabarActionPerformed
        // TODO add your handling code here:

        File fichero = new File(System.getenv("userprofile") + "\\Documents", "PrestamosPreconcedidos.txt");
        List<PrestamoPreconcedido> lista = MetodosBD.listarPrestamosPreconcedidos();

        if (!lista.isEmpty()) {

            if (!fichero.exists()) {
                Ficheros.escribirLineaALineaDeListPrestamosPreconcedidos(fichero, lista);
                JOptionPane.showMessageDialog(null, "Se ha generado el informe correctamente en:\n" + fichero.getAbsolutePath(), "Informe préstamos preconcedidos", JOptionPane.INFORMATION_MESSAGE);
            } else {

                if (Ficheros.eliminar(fichero)) {
                    Ficheros.escribirLineaALineaDeListPrestamosPreconcedidos(fichero, lista);
                    JOptionPane.showMessageDialog(null, "Se ha generado el informe en:\n" + fichero.getAbsolutePath(), "Informe préstamos preconcedidos", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "No se puede eliminar el informe:\n" + fichero.getAbsolutePath(), "Informe préstamos preconcedidos", JOptionPane.ERROR_MESSAGE);
                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "No se encuentran clientes y préstamos preconcedidos.", "Informe préstamos preconcedidos", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jGrabarActionPerformed

    /**
     * Método jTextFieldDNISolicitarKeyPressed que permite hacer ENTER en la JTextField de la pantalla de solicitud de préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jTextFieldDNISolicitarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDNISolicitarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Acción a ejecutar cuando se presione Enter
            jButtonBuscarSolicitarActionPerformed(null);
        }
    }//GEN-LAST:event_jTextFieldDNISolicitarKeyPressed

    /**
     * Método jTextFieldDatoMostrarKeyPressed que permite hacer ENTER en la JTextField de la pantalla de mostrar datos de clientes y sus préstamos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jTextFieldDatoMostrarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDatoMostrarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Acción a ejecutar cuando se presione Enter
            jButtonBuscarMostrarActionPerformed(null);
        }
    }//GEN-LAST:event_jTextFieldDatoMostrarKeyPressed

    /**
     * Método jTIntroDNIKeyPressed que permite hacer ENTER en la JTextField de la pantalla de firmar préstamos preconcedidos.
     *
     * @param evt Parámetro de tipo ActionEvent.
     */
    private void jTIntroDNIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIntroDNIKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Acción a ejecutar cuando se presione Enter
            jBPreconcedidos2ActionPerformed(null);
        }
    }//GEN-LAST:event_jTIntroDNIKeyPressed

    private void jButtonGenerarInformePrestamosConcedidosActionPerformedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarInformePrestamosConcedidosActionPerformedActionPerformed
        // TODO add your handling code here:

        File fichero = new File(System.getenv("userprofile") + "\\Documents", "PrestamosConcedidos.txt");
        List<PrestamoConcedido> lista = MetodosBD.listarPrestamosConcedidos();

        if (!lista.isEmpty()) {

            if (!fichero.exists()) {
                Ficheros.escribirLineaALineaDeListPrestamosConcedidos(fichero, lista);
                JOptionPane.showMessageDialog(null, "Se ha generado el informe correctamente en:\n" + fichero.getAbsolutePath(), "Informe préstamos concedidos", JOptionPane.INFORMATION_MESSAGE);
            } else {

                if (Ficheros.eliminar(fichero)) {
                    Ficheros.escribirLineaALineaDeListPrestamosConcedidos(fichero, lista);
                    JOptionPane.showMessageDialog(null, "Se ha generado el informe en:\n" + fichero.getAbsolutePath(), "Informe préstamos concedidos", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "No se puede eliminar el informe:\n" + fichero.getAbsolutePath(), "Informe préstamos concedidos", JOptionPane.ERROR_MESSAGE);
                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "No se encuentran clientes y préstamos concedidos.", "Informe préstamos concedidos", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButtonGenerarInformePrestamosConcedidosActionPerformedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Prestamos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DNI;
    private javax.swing.JButton jBBFirmar;
    private javax.swing.JButton jBCalcular;
    private javax.swing.JButton jBCalculo;
    private javax.swing.JButton jBFirmar;
    private javax.swing.JButton jBMostrar;
    private javax.swing.JButton jBPLimpiar;
    private javax.swing.JButton jBPreconcedidos2;
    private javax.swing.JButton jBSolicitar;
    private javax.swing.JButton jBVolver;
    private javax.swing.JButton jBVolver1;
    private javax.swing.JButton jBVolverMostrar;
    private javax.swing.JButton jButtonBuscarMostrar;
    private javax.swing.JButton jButtonBuscarSolicitar;
    private javax.swing.JButton jButtonGenerarInformePrestamosConcedidosActionPerformed;
    private javax.swing.JButton jButtonLimpiarMostrar;
    private javax.swing.JButton jButtonLimpiarSolicitar;
    private javax.swing.JButton jButtonProcesarSolicitar;
    private javax.swing.JButton jButtonVolverSolicitar;
    private javax.swing.JComboBox<String> jComboBoxFiltroMostrar;
    private javax.swing.JComboBox<String> jComboBoxPeriodoMesesSolicitar;
    private javax.swing.JComboBox<String> jComboBoxPlazoAceptacionSolicitar;
    private javax.swing.JComboBox<String> jComboBoxTipoInteresSolicitar;
    private javax.swing.JButton jGrabar;
    private javax.swing.JLabel jLCalculoPrestamo;
    private javax.swing.JLabel jLFirmarPrestamo1;
    private javax.swing.JLabel jLPrestamoConcedido;
    private javax.swing.JLabel jLPrestamoPreconcedido1;
    private javax.swing.JLabel jLabelDNISolicitar;
    private javax.swing.JLabel jLabelDatosClienteSolicitar;
    private javax.swing.JLabel jLabelFiltroMostrar;
    private javax.swing.JLabel jLabelMostrar;
    private javax.swing.JLabel jLabelPeriodoMesesSolicitar;
    private javax.swing.JLabel jLabelPlazoAceptacionSolicitar;
    private javax.swing.JLabel jLabelTipoInteresSolicitar;
    private javax.swing.JLabel jLabelTituloSolicitar;
    private javax.swing.JPanel jPCalcularPrestamo;
    private javax.swing.JPanel jPFirmar;
    private javax.swing.JPanel jPMostrar;
    private javax.swing.JPanel jPPortada;
    private javax.swing.JPanel jPSolicitar;
    private javax.swing.JScrollPane jScrollPane1Mostrar;
    private javax.swing.JScrollPane jScrollPaneClientesSolicitar;
    private javax.swing.JScrollPane jScrollPaneConcedidos;
    private javax.swing.JScrollPane jScrollPanePreconcedido;
    private javax.swing.JScrollPane jScrollPanePrestamo;
    private javax.swing.JTextField jTIntroDNI;
    private javax.swing.JTable jTableCalculo;
    private javax.swing.JTable jTableConcedidosFirmar;
    private javax.swing.JTable jTableMostrar;
    private javax.swing.JTable jTablePreconcedidosFirmar;
    private javax.swing.JTable jTableSolicitar;
    private javax.swing.JTextField jTextFieldDNISolicitar;
    private javax.swing.JTextField jTextFieldDatoMostrar;
    private javax.swing.JLabel lblFondoCalculo;
    private javax.swing.JLabel lblFondoFirmar;
    private javax.swing.JLabel lblFondoMostrar;
    private javax.swing.JLabel lblFondoSolicitar;
    private javax.swing.JLabel lblLogo;
    // End of variables declaration//GEN-END:variables
}
